
=head1 USE IN SHELL-SCRIPTS

=head2 Advantages

    The env utility is often used as the interpreter on the first line of interpreted 
    scripts, as described in execve(2).

    There are several advantages to doing so:
    
    * The path to the interpreter does not need to be hardcoded. Not all systems
    have perl in /usr/bin/perl for example. With env2, as long as perl is in the
    PATH, it will be found and executed.
    
    * Normally the interpreter needs to be an executable, not another script. With
    env2, this restriction is removed.
    
    * Without env2, the interpreter arguments are all treated as one string. This
    will cause problems if there are multiple arguments that are seperated by
    spaces that need to be passed in as seperate arguments.  See the next sub-section
    titled '''Splitting out the interpreter argument string'''.

=head2 Splitting out the interpreter argument string

    The way the Linux kernel parses the `#!' (first line) of an interpreted 
    script is to treat all the interpreter args as a single string. So, if a
    script named /usr/bin/someport had a first line of:

    #!/usr/bin/php -n -q -dsafe_mode=0

    then the /usr/bin/php program be started with the arguments of:

    arg[0] = '/usr/bin/php'
    arg[1] = '-n -q -dsafe_mode=0'
    arg[2] = '/usr/bin/someport'

    which will not work as php will not be able to parse arg[1].
    However, when the first line is changed to use this program first:

    #!/usr/bin/env2 php -n -q -dsafe_mode=0

    then the /usr/bin/php program be started with the arguments of:

    arg[0] = '/usr/bin/php'
    arg[1] = '-n'
    arg[2] = '-q'
    arg[3] = '-dsafe_mode=0'
    arg[4] = '/usr/bin/someport'

    (plus any arguments the user specified when executing someport.) This will work
    as expected.

   See the "A BIT OF HISTORY" section for more on why this is.

=head1 CONFIG FILE

    If a configureation file is found ($HOME/.env2rc) then it is parsed as follows:

    # These are environment variables           - this is a comment line
    VARIABLE1=foo                               - set VARIABLE1
    VARIABLE2="with embedded spaces"            - set VARIABLE2 
    VARIABLE3+additional                        - append to VARIABLE3
    VARIABLE4!                                  - unset VARIABLE4
                                                - blank lines are ignored
    # These are program arguments               - another comment
    prog1:-flag1                                - append flag to prog1
    prog2:-flag1 -arg2="val with spaces"        - append flags to prog2
    prog3;-opt1                                 - override flags with ones listed here

=head1 A BIT OF HISTORY

The  semantics  of  the optional-arg argument of an interpreter script vary across implementations
On Linux, the entire string following the interpreter name is passed as a single argument
to  the interpreter, and this string can include white space.  However, behavior differs
on some other systems.  Some systems use the first white space to terminate optional-arg.   On
some systems, an interpreter script can have multiple arguments, and white spaces in 
optional-arg are used to delimit the arguments.

From 1993 to mid-2005, FreeBSD parsed out the tokens as
found on the first line of the script, and setup each token as a separate
value in arg[].  This extra processing did not match the behavior of other
OS's, and caused a few subtle problems.  For one, it meant the kernel was
deciding how those values should be parsed (wrt characters for quoting or
comments, etc), while the interpreter might have other rules for parsing.
It also meant the interpreter had no way of knowing which arguments came
from the first line of the shell script, and which arguments were specified
by the user on the command line.

In 2005, the BSD version of env(1) added the -S string option to split out the interprter arg line.

In 2018, the GNU version on env(1) added the same flag.

=head1 BUGS

    Code has hard limits for string sizes (255).
    Code uses a strange mix of C and C++.
    Please report all Bugs to the author.

=head1 REPOSITORY

    https://github.com/chrispollitt/CWPutils

=head1 AUTHORS

    Chris Pollitt [ chris.pollitt@gmail.com ]

=head1 SEE ALSO

    GNU env(1)
    BSD env(1) [https://www.freebsd.org/cgi/man.cgi?env]
    dumpargs(1)
