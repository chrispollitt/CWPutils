# -*-Shell-*-

#################################################
#                                               #
#   Sample script for the Sample Interpreter    #
#   (This is actually a BASH script)            #
#                                               #
#################################################

###################################
# Get the Interpreter argv[] array
###################################
typeset -a argv
function get_inter_argv {
#  local line
  local i
  local found
  
  # get cmd line #######
  
  # from /proc
  if [[ -f /proc/self/cmdline ]]; then
    line=$( (while IFS= read -r -s -d '' -n 1 char; do
      if [[ "$char" == '' ]]; then
        line="$line "
      else
        line="$line$char"
      fi
    done
    echo "$line"
    ) < /proc/self/cmdline)
  # from ps
  else
    line=$(ps -p $$ -o command=)
  fi

  # split out into argv ######
  
  (( i = 0 ))
  (( found = 0 ))
  for a in $line; do
    if [[ $a == -* ]]; then
      if (( found > 1 )); then
        true
      else
        argv[i]="$a"
        (( i = i + 1 ))
      fi
    else
      if (( found == 0 )); then
        argv[i]="$a"
        (( i = i + 1 ))
      elif (( found == 1 )); then
        break
      fi
      (( found++ ))
    fi
  done
}

###################################
# Main
###################################
function main {
  local i
  
  # if argv not populated, do so
  if [[ ${#argv[@]} == 0 ]]; then
    get_inter_argv
  fi
  
  # print out interpreter argv
  echo "====Interpreter"
  (( i = 0 ))
  while [[ $i -lt ${#argv[@]} ]]; do
    echo "argv[$i]='${argv[$i]}'"
    (( i = i + 1 ))
  done
  
  # print out this script's argv
  echo "====Script"
  echo "0='${BASH_ARGV0-$0}'"
  (( i = 1 ))
  while [[ $i -le $# ]]; do
    echo "$i='${!i}'"
    (( i = i + 1 ))
  done
}
main ${1+"$@"}
